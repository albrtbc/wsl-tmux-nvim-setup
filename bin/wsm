#!/bin/bash
#
# WSL-Tmux-Nvim-Setup CLI Launcher
# 
# This script provides a system-wide entry point for the WSM CLI tool.
# It handles Python path setup and execution in different environments.
#

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CLI_MODULE="cli.wsm"
CLI_PATH="$PROJECT_ROOT/cli"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check if we're in a development environment
is_development() {
    [[ -f "$PROJECT_ROOT/setup.py" ]] && [[ -d "$CLI_PATH" ]]
}

# Check if WSM is installed as a package
is_installed() {
    python3 -c "import cli.wsm" 2>/dev/null
}

# Find the best Python executable
find_python() {
    local python_candidates=("python3" "python" "python3.11" "python3.10" "python3.9" "python3.8" "python3.7")
    
    for python_cmd in "${python_candidates[@]}"; do
        if command -v "$python_cmd" >/dev/null 2>&1; then
            # Check if it's Python 3.7+
            local version
            version=$("$python_cmd" -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null)
            if [[ $? -eq 0 ]] && "$python_cmd" -c "
import sys
version = tuple(map(int, '$version'.split('.')))
sys.exit(0 if version >= (3, 7) else 1)
" 2>/dev/null; then
                echo "$python_cmd"
                return 0
            fi
        fi
    done
    
    return 1
}

# Check dependencies
check_dependencies() {
    local python_cmd="$1"
    local missing_deps=()
    
    # Core dependencies
    local deps=("click" "rich" "requests" "pydantic" "yaml")
    
    for dep in "${deps[@]}"; do
        if ! "$python_cmd" -c "import $dep" 2>/dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        log_info "Install with: pip install ${missing_deps[*]}"
        return 1
    fi
    
    return 0
}

# Install dependencies
install_dependencies() {
    local python_cmd="$1"
    
    log_info "Installing required dependencies..."
    
    if [[ -f "$PROJECT_ROOT/requirements.txt" ]]; then
        "$python_cmd" -m pip install -r "$PROJECT_ROOT/requirements.txt" --user
    else
        # Install core dependencies directly
        "$python_cmd" -m pip install --user \
            "click>=8.0.0" \
            "rich>=12.0.0" \
            "requests>=2.28.0" \
            "pydantic>=1.10.0" \
            "pyyaml>=6.0" \
            "tqdm>=4.64.0" \
            "python-dateutil>=2.8.0" \
            "psutil>=5.9.0"
    fi
    
    log_success "Dependencies installed"
}

# Run the CLI
run_cli() {
    local python_cmd="$1"
    shift
    
    if is_development; then
        # Development mode - run from source
        export PYTHONPATH="$PROJECT_ROOT:$PYTHONPATH"
        exec "$python_cmd" -m "$CLI_MODULE" "$@"
        
    elif is_installed; then
        # Package mode - use installed package
        exec "$python_cmd" -m "$CLI_MODULE" "$@"
        
    else
        # Try to run from current directory as fallback
        if [[ -f "$CLI_PATH/wsm.py" ]]; then
            export PYTHONPATH="$PROJECT_ROOT:$PYTHONPATH"
            exec "$python_cmd" "$CLI_PATH/wsm.py" "$@"
        else
            log_error "WSM CLI not found. Please install the package or run from the project directory."
            exit 1
        fi
    fi
}

# Show help for launcher
show_launcher_help() {
    cat << EOF
WSM CLI Launcher
================

This launcher script handles Python environment setup and WSM CLI execution.

Usage:
  $0 [WSM_OPTIONS...]          # Run WSM CLI with options
  $0 --launcher-help           # Show this help
  $0 --launcher-setup          # Set up dependencies
  $0 --launcher-info           # Show environment information

Environment Detection:
  • Development: Runs from source code in project directory
  • Installed: Uses system-installed WSM package
  • Fallback: Attempts direct execution from CLI directory

Requirements:
  • Python 3.7 or higher
  • Required Python packages (will be installed if missing)

Examples:
  $0 install                   # Install WSL setup
  $0 status --all              # Show comprehensive status
  $0 --launcher-setup          # Install missing dependencies
  
For WSM CLI help, use: $0 --help
EOF
}

# Show environment information
show_environment_info() {
    local python_cmd
    python_cmd=$(find_python)
    
    echo "WSM CLI Environment Information"
    echo "==============================="
    echo ""
    echo "Launcher Script: $0"
    echo "Project Root: $PROJECT_ROOT"
    echo "CLI Path: $CLI_PATH"
    echo ""
    
    if [[ -n "$python_cmd" ]]; then
        echo "Python: $python_cmd"
        echo "Python Version: $("$python_cmd" --version 2>&1)"
        echo "Python Path: $(command -v "$python_cmd")"
    else
        echo "Python: Not found or incompatible version"
    fi
    
    echo ""
    echo "Environment Type:"
    if is_development; then
        echo "  ✓ Development (source code available)"
    else
        echo "  ✗ Development (source code not found)"
    fi
    
    if is_installed; then
        echo "  ✓ Installed (package available)"
    else
        echo "  ✗ Installed (package not found)"
    fi
    
    echo ""
    echo "Dependencies:"
    if [[ -n "$python_cmd" ]]; then
        local deps=("click" "rich" "requests" "pydantic" "yaml")
        for dep in "${deps[@]}"; do
            if "$python_cmd" -c "import $dep" 2>/dev/null; then
                echo "  ✓ $dep"
            else
                echo "  ✗ $dep (missing)"
            fi
        done
    else
        echo "  Cannot check (Python not available)"
    fi
}

# Main execution
main() {
    # Handle launcher-specific options
    case "${1:-}" in
        --launcher-help)
            show_launcher_help
            exit 0
            ;;
        --launcher-info)
            show_environment_info
            exit 0
            ;;
        --launcher-setup)
            shift
            ;;
        *)
            # Regular WSM execution
            local python_cmd
            if ! python_cmd=$(find_python); then
                log_error "Python 3.7+ not found. Please install Python 3.7 or higher."
                exit 1
            fi
            
            if ! check_dependencies "$python_cmd"; then
                log_warning "Missing dependencies detected"
                if [[ -t 0 ]]; then
                    read -p "Install missing dependencies? (y/N) " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        install_dependencies "$python_cmd"
                    else
                        log_error "Dependencies required for WSM CLI operation"
                        exit 1
                    fi
                else
                    log_error "Dependencies required. Run with --launcher-setup to install."
                    exit 1
                fi
            fi
            
            run_cli "$python_cmd" "$@"
            ;;
    esac
    
    # Handle setup mode
    local python_cmd
    if ! python_cmd=$(find_python); then
        log_error "Python 3.7+ not found. Please install Python 3.7 or higher."
        exit 1
    fi
    
    log_info "Setting up WSM CLI dependencies..."
    install_dependencies "$python_cmd"
    
    if check_dependencies "$python_cmd"; then
        log_success "WSM CLI is ready to use!"
        log_info "Try: $0 --help"
    else
        log_error "Setup failed. Please check the error messages above."
        exit 1
    fi
}

# Execute main function with all arguments
main "$@"