[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "wsl-tmux-nvim-setup"
dynamic = ["version"]
description = "WSL-Tmux-Nvim-Setup Manager - CLI tool for WSL development environment"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Albert Dall'Ara", email = "noreply@example.com"}
]
maintainers = [
    {name = "Albert Dall'Ara", email = "noreply@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers", 
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8", 
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Systems Administration",
    "Topic :: Terminals",
    "Topic :: Utilities",
]
keywords = [
    "wsl", "tmux", "neovim", "development", "setup", "cli", "linux",
    "terminal", "environment", "configuration", "installer"
]
requires-python = ">=3.7"
dependencies = [
    "click>=8.0.0",
    "rich>=12.0.0", 
    "requests>=2.28.0",
    "pydantic>=1.10.0",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "python-dateutil>=2.8.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "flake8>=4.0", 
    "mypy>=0.900",
    "pre-commit>=2.15.0",
]
build = [
    "pyinstaller>=4.0",
    "wheel>=0.36", 
    "twine>=3.0",
    "build>=0.7.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.6.0",
    "responses>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/albertodall/wsl-tmux-nvim-setup"
Documentation = "https://github.com/albertodall/wsl-tmux-nvim-setup/wiki"
Repository = "https://github.com/albertodall/wsl-tmux-nvim-setup"
"Bug Tracker" = "https://github.com/albertodall/wsl-tmux-nvim-setup/issues"
Changelog = "https://github.com/albertodall/wsl-tmux-nvim-setup/blob/main/CHANGELOG.md"

[project.scripts]
wsm = "cli.wsm:main"
wsl-setup-manager = "cli.wsm:main"

[tool.setuptools]
packages = ["cli", "cli.commands", "cli.utils"]
package-dir = {"" = "."}

[tool.setuptools.package-data]
"cli" = ["*.yml", "*.yaml", "*.json"]
"cli.commands" = ["*.yml", "*.yaml", "*.json"] 
"cli.utils" = ["*.yml", "*.yaml", "*.json"]

[tool.setuptools_scm]
write_to = "cli/_version.py"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration  
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["cli"]
known_third_party = ["click", "rich", "requests", "pydantic", "yaml", "tqdm", "psutil"]

# Flake8 configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "dist", "build", ".eggs"]

# MyPy configuration
[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "yaml.*",
    "tqdm.*",
    "psutil.*",
]
ignore_missing_imports = true

# Pytest configuration  
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]