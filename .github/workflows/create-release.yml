---
name: Create Release

'on':
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests
          sudo apt-get update
          sudo apt-get install -y zip tar gzip

      - name: Create release directory
        run: mkdir -p release-assets

      - name: Create release archive (tar.gz)
        run: |
          # Create a staging directory
          mkdir -p wsl-tmux-nvim-setup-${{ github.event.inputs.version }}

          # Copy all necessary files
          cp -r auto_install wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r configs wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r bin wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r scripts wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r docs wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp README.md wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp LICENSE wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/ 2>/dev/null || true
          cp requirements.txt wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/ 2>/dev/null || true
          cp version.json wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/

          # Create tar.gz archive
          tar -czf release-assets/wsl-tmux-nvim-setup-${{ github.event.inputs.version }}.tar.gz \
            wsl-tmux-nvim-setup-${{ github.event.inputs.version }}

          # Clean up staging directory
          rm -rf wsl-tmux-nvim-setup-${{ github.event.inputs.version }}

      - name: Create release archive (zip)
        run: |
          # Create a staging directory
          mkdir -p wsl-tmux-nvim-setup-${{ github.event.inputs.version }}

          # Copy all necessary files
          cp -r auto_install wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r configs wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r bin wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r scripts wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp -r docs wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp README.md wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/
          cp LICENSE wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/ 2>/dev/null || true
          cp requirements.txt wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/ 2>/dev/null || true
          cp version.json wsl-tmux-nvim-setup-${{ github.event.inputs.version }}/

          # Create zip archive
          zip -r release-assets/wsl-tmux-nvim-setup-${{ github.event.inputs.version }}.zip \
            wsl-tmux-nvim-setup-${{ github.event.inputs.version }}

          # Clean up staging directory
          rm -rf wsl-tmux-nvim-setup-${{ github.event.inputs.version }}

      - name: Copy install script
        run: |
          cp scripts/install.sh release-assets/install.sh
          chmod +x release-assets/install.sh

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum *.tar.gz *.zip install.sh > checksums.txt
          cd ..

      - name: Create release notes
        run: |
          cat > release-assets/release-notes.md << 'EOF'
          ## WSL-Tmux-Nvim-Setup ${{ github.event.inputs.version }}

          ### Installation

          #### Quick Install (Recommended)
          ```bash
          curl -sSL https://github.com/albrtbc/wsl-tmux-nvim-setup/releases/download/${{ github.event.inputs.version }}/install.sh | bash
          ```

          #### Manual Installation
          1. Download the release archive (tar.gz or zip)
          2. Extract to your desired location
          3. Run the installation script:
          ```bash
          cd wsl-tmux-nvim-setup-${{ github.event.inputs.version }}
          python3 auto_install/main.py
          ```

          ### What's Included
          - Tmux configuration and plugins
          - Neovim configuration with LazyVim
          - Git configuration and tools
          - Zsh with Oh My Zsh
          - Development tools (lazygit, yazi, etc.)

          ### Requirements
          - WSL2 (Ubuntu 20.04+ recommended)
          - Python 3.8+
          - Git

          ### Documentation
          - [CLI Reference](https://github.com/albrtbc/wsl-tmux-nvim-setup/blob/main/docs/CLI_REFERENCE.md)
          - [Auto-Update Guide](https://github.com/albrtbc/wsl-tmux-nvim-setup/blob/main/Auto-Update-Guide.md)

          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body_path: release-assets/release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
            release-assets/install.sh
            release-assets/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## ðŸš€ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release:** ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Assets" >> $GITHUB_STEP_SUMMARY
          echo "- wsl-tmux-nvim-setup-${{ github.event.inputs.version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "- wsl-tmux-nvim-setup-${{ github.event.inputs.version }}.zip" >> $GITHUB_STEP_SUMMARY
          echo "- install.sh" >> $GITHUB_STEP_SUMMARY
          echo "- checksums.txt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "curl -sSL https://github.com/albrtbc/wsl-tmux-nvim-setup/releases/download/${{ github.event.inputs.version }}/install.sh | bash" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY